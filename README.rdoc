= Prophet

I'm slowly starting to develop a hard dependency on an AMQP provider, instead of custom DRb queue.
- The advantage of AMQP is ability to deploy and scale cross organization.
- The advantage of using DRb is pure rubyness and no other dependencies.

The AMQP branch will be the master while i'll continue maintaining and synching the DRb based branch with
lesser priority. Hopefully i'll abstract the queue out, and pull out a provider pattern when IAGNI (but for now, YAGNI).

For AMQP, currently i use RabbitMQ and bunny.

== Description

Prophet is a low traffic runtime messaging framework (look at it as a Shoutbot on steroids). Prophet asynchronously takes your announcements (application side) and forwards them to different notifiers (endpoints). With Prophet you can make sure that your announcements are available via every channel available at once, at the convinience of your clients/users.

This work is still forming up, so beware of sharp edges.

Prophet makes some assumptions on your directory structure in order to discover endpoint plugins:

     + prophet.rb
       + endpoints
         + bot                   # this is the keyword you use in your configuration 'bot', 'jabber'
           - bot_endpoint.rb     # must have Endpoint#create, that takes an options hash.
         
         
The configuration DSL is much inspired from Sinatra and Isaac.

Currently you can use Prophet over IRC and tweeter. Jabber and Email are also in planning.


== Dependencies

The BotEndpoint notifier depends on isaac (for IRC).
	so for now,
	$ gem install issac 

The TwitterEndpoint notifier depends on tweeter.
    $ gem install tweeter
    on jruby, also: $ gem install jruby-openssl 
    
== usage
	simple:
	
    #configure your endpoints. currently only irc (bot) is allowed
    @p = Prophet.new do
    
        # cruise control IRC bot for prophecy v1.0 - dev channel
        bot 'cruise.irc' do
            config :nick => 'tom_cruise', :server => 'irc.freenode.net', :channel=>'#prophecy_v1'
            on :announce do |msg|
                msg.upcase
            end
        end
        
        # breakers may listen to these tweets
        twitter 'breakers' do
           config :user => 'you_broke_my_build_dude', :password => 'tweety!'
           on :announce do |msg|
               msg.downcase
           end
        end
        
        
        
        #not implemented yet
        # customer support 
        #jabber 'support' do
        #	config :user => 'u', :password => 'p'
        #	on :announce do
        #		erb msg, :newmsg
        #	end
        #end
    end
    
    
    # spawn up endpoints if you want to.
    @p.up!
    
    
    # in your application
    @p.announce 'Everyone, we are going to shutdown all VMs. Stay tuned.'
    @p.announce :breakers, 'Someone broke the build again >=|'
    @p.announce :support, 'v1.2, http://bit.ly/112'
    
    # not yet implemented
    @p.msg :jondoe, 'dude, we need you ASAP. builder crashed!'
    
== About

ideas? <dotan@paracode.com>

